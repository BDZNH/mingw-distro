diff -aurN glbinding-2.0.0/source/glbinding/source/Binding.cpp glbinding-2.0.0-fixed/source/glbinding/source/Binding.cpp
--- glbinding-2.0.0/source/glbinding/source/Binding.cpp	2016-03-24 10:15:07.000000000 -0700
+++ glbinding-2.0.0-fixed/source/glbinding/source/Binding.cpp	2016-04-25 20:50:24.191675500 -0700
@@ -2,7 +2,15 @@
 #include <glbinding/Binding.h>
 
 #include <unordered_map>
+
+#ifdef GLBINDING_USE_BOOST_THREAD
+#include <boost/thread.hpp>
+namespace std_boost = boost;
+#else
 #include <mutex>
+namespace std_boost = std;
+#endif
+
 #include <cassert>
 
 #include "glbinding/glbinding_features.h"
@@ -13,7 +21,7 @@
 
 GLBINDING_THREAD_LOCAL glbinding::ContextHandle t_context = 0;
 
-std::recursive_mutex g_mutex;
+std_boost::recursive_mutex g_mutex;
 std::unordered_map<glbinding::ContextHandle, int> g_bindings;
 
 } // namespace
diff -aurN glbinding-2.0.0/source/glbinding/source/logging.cpp glbinding-2.0.0-fixed/source/glbinding/source/logging.cpp
--- glbinding-2.0.0/source/glbinding/source/logging.cpp	2016-03-24 10:15:07.000000000 -0700
+++ glbinding-2.0.0-fixed/source/glbinding/source/logging.cpp	2016-04-25 21:04:33.780329900 -0700
@@ -3,11 +3,20 @@
 
 #include <array>
 #include <atomic>
-#include <condition_variable>
+#include <chrono>
 #include <fstream>
-#include <mutex>
 #include <sstream>
+
+#ifdef GLBINDING_USE_BOOST_THREAD
+#include <boost/chrono.hpp>
+#include <boost/thread.hpp>
+namespace std_boost = boost;
+#else
+#include <condition_variable>
+#include <mutex>
 #include <thread>
+namespace std_boost = std;
+#endif
 
 #include "logging_private.h"
 #include "RingBuffer.h"
@@ -20,8 +29,8 @@
 
 std::atomic<bool> g_stop{false};
 std::atomic<bool> g_persisted{false};
-std::mutex g_lockfinish;
-std::condition_variable g_finishcheck;
+std_boost::mutex g_lockfinish;
+std_boost::condition_variable g_finishcheck;
 
 using FunctionCallBuffer = glbinding::RingBuffer<glbinding::logging::LogEntry>;
 FunctionCallBuffer g_buffer{LOG_BUFFER_SIZE};
@@ -74,7 +83,7 @@
     removeCallbackMask(CallbackMask::Logging);
 
     g_stop = true;
-    std::unique_lock<std::mutex> locker(g_lockfinish);
+    std_boost::unique_lock<std_boost::mutex> locker(g_lockfinish);
 
     // Spurious wake-ups: http://www.codeproject.com/Articles/598695/Cplusplus-threads-locks-and-condition-variables
     while(!g_persisted)
@@ -100,7 +109,7 @@
 
     while (!available)
     {
-        std::this_thread::sleep_for(std::chrono::milliseconds(1));
+        std_boost::this_thread::sleep_for(std_boost::chrono::milliseconds(1));
         next = g_buffer.nextHead(available);
     }
 
@@ -115,7 +124,7 @@
     g_stop = false;
     g_persisted = false;
 
-    std::thread writer([filepath]()
+    std_boost::thread writer([filepath]()
     {
         const auto key = g_buffer.addTail();
         std::ofstream logfile;
@@ -133,7 +142,7 @@
 
             logfile.flush();
 
-            std::this_thread::sleep_for(std::chrono::milliseconds(1));
+            std_boost::this_thread::sleep_for(std_boost::chrono::milliseconds(1));
         }
 
         logfile.close();
diff -aurN glbinding-2.0.0/source/glbinding/source/RingBuffer.hpp glbinding-2.0.0-fixed/source/glbinding/source/RingBuffer.hpp
--- glbinding-2.0.0/source/glbinding/source/RingBuffer.hpp	2016-03-24 10:15:07.000000000 -0700
+++ glbinding-2.0.0-fixed/source/glbinding/source/RingBuffer.hpp	2016-04-25 21:22:53.179803600 -0700
@@ -2,7 +2,6 @@
 #pragma once
 
 #include <iomanip>
-#include <thread>
 #include <iterator>
 #include <cassert>
 #include <cmath>
